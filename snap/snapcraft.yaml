%YAML 1.1
---
# Snapcraft Recipe for Go-mtpfs
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * Snapcraft.yaml reference
#   https://docs.snapcraft.io/snapcraft-yaml-reference/4276
# * The snapcraft syntax
#   https://docs.snapcraft.io/build-snaps/syntax
# * Snap Docs
#   https://docs.snapcraft.io
# * Latest doc topics in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

name: go-mtpfs-brlin
summary: Mount MTP devices over FUSE
description: |
  Go-mtpfs is a simple FUSE filesystem for mounting Android devices as a MTP device.

  It will expose all storage areas of a device in the mount, and only reads file metadata as needed, making it mount quickly. It uses Android extensions to read/write partial data, so manipulating large files requires no extra space in /tmp.

  It has been tested on various flagship devices (Galaxy Nexus, Xoom, Nexus 7). As of Jan. 2013, it uses a pure Go implementation of MTP, which is based on libusb.

  THIS IS NOT AN OFFICIAL DISTRIBUTION!  Refer the issue tracker for any problems regarding this snap:
  https://github.com/Lin-Buo-Ren/go-mtpfs-snap/issues

icon: snap/gui/placeholder.png

#version: determined-by-adopt-info
adopt-info: go-mtpfs

# Reasons of using classic confinement:
# * Currently the fuse-support interface doesn't support unprivileged mounts
#   https://github.com/snapcore/snapd/blob/master/interfaces/builtin/fuse_support.go
# * This fs mounter is expected to be run most user-writable locations rather than snap-specific writable directories that are allowed by the fuse-support interface
confinement: classic
grade: devel

#plugs:
  ## Storage access
  #home:
  #removable-media: # Non-A/C

  #fuse-support:

  #hardware-observe:

  #raw-usb:

#slots:

apps:
  go-mtpfs-brlin:
    command: >
      bin/classic-launch
      "${SNAP}"/bin/go-mtpfs-launch
      "${SNAP}"/bin/"${SNAPCRAFT_PROJECT_NAME}"

parts:
  # Assets from the snap packaging, refer each READMEs under the `snap` folder for more information
  assets:
    source: snap/local
    plugin: dump

    override-build: ./utilities/install-assets.bash

    prime:
    - -utilities
    - -patches

  # The version provided by Ubuntu 16.04(1.6.2) is too old
  go:
    source-tag: go1.11.2
    source-depth: 1

  # Recent release of libusb, probably valuable to keep it to avoid low-level bugs
  #libusb:
    #source: https://github.com/libusb/libusb.git
    #source-tag: v1.0.22
    #source-depth: 1

    #plugin: autotools
    #build-packages:
    #- libudev-dev

    #filesets:
      #library-headers:
      #- include
      #library-libtool:
      #- lib/*.la
      #library-pkgconfig:
      #- lib/pkgconfig
      #library-shared:
      #- lib/*.so*
      #library-static:
      #- lib/*.a

    #stage:
    #- $library-headers
    #- $library-pkgconfig
    #- $library-shared
    #- $library-static

    #prime:
    #- $library-shared

  go-mtpfs:
    after:
    - go
    #- libusb

    source: https://github.com/hanwen/go-mtpfs.git
    source-depth: 1
    override-pull: |
      set \
        -o errexit \
        -o nounset
      snapcraftctl pull

      go_mtpfs_revision="$(
        git describe \
          --always \
          --dirty=-d \
          --tags
      )"

      packaging_revision="$(
        git -C .. describe \
          --abbrev=4 \
          --always \
          --dirty=-d \
          --match=nothing
      )"

      snapcraftctl set-version \
        "${go_mtpfs_revision}"-snap-"${packaging_revision}"

    plugin: go
    go-importpath: github.com/hanwen/go-mtpfs
    build-packages:
    - libusb-1.0-0-dev
    stage-packages:
    - libudev1
    - libusb-1.0-0

    organize:
      bin/go-mtpfs: bin/${SNAPCRAFT_PROJECT_NAME}
